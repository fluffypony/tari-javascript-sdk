name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  RUST_VERSION: 1.75.0
  NODE_VERSION: 18

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
      
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install
      
      - name: Lint TypeScript
        run: pnpm lint
      
      - name: Lint Rust
        working-directory: packages/@tari/core/native
        run: |
          cargo fmt -- --check
          cargo clippy -- -D warnings

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18, 20]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install
      
      - name: Build
        run: pnpm build
      
      - name: Test
        run: pnpm test

  build-native:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64
          
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin-x64
          
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
          
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.platform == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      - name: Build native module
        working-directory: packages/@tari/core
        run: |
          npm run build:native
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: native-${{ matrix.platform }}
          path: packages/@tari/core/native/index.node
          if-no-files-found: error

  package-prebuilds:
    needs: build-native
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Organize prebuilds
        run: |
          mkdir -p packages/@tari/core/prebuilds
          
          for platform in linux-x64 linux-arm64 darwin-x64 darwin-arm64 win32-x64; do
            mkdir -p packages/@tari/core/prebuilds/$platform
            cp artifacts/native-$platform/index.node packages/@tari/core/prebuilds/$platform/
          done
      
      - name: Create tarball
        run: |
          cd packages/@tari/core
          tar -czf prebuilds.tar.gz prebuilds/
      
      - name: Upload prebuilds
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds-all
          path: packages/@tari/core/prebuilds.tar.gz
